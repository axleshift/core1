generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type FreightAmount {
  currency String
  value    Float
}

type FreightFrom {
  address     String
  address2    String
  address3    String
  city        String
  company     String
  country     String
  countryCode String
  email       String
  name        String
  phone       String
  taxId       String
  zipCode     String
}

type FreightItems {
  height Int
  length Int
  weight String?
  width  Int
}

type FreightTo {
  address     String
  address2    String
  address3    String
  city        String
  company     String
  country     String
  countryCode String
  email       String
  employerId  String
  name        String
  phone       String
  zipCode     String
}

type SessionsKey {
  /// Multiple data types found: String: 68.2%, SessionsKeyPrivateKey: 31.8% out of 22 sampled entries
  privateKey Json
  /// Multiple data types found: String: 68.2%, SessionsKeyPublicKey: 31.8% out of 22 sampled entries
  publicKey  Json
}

type UsersOauth2 {
  github UsersOauth2Github?
  google UsersOauth2Google?
}

type UsersOauth2Github {
  created_at Float
  email      String
  updated_at Float
}

type UsersOauth2Google {
  created_at Float
  email      String
  updated_at Float
}

model activityLog {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  event      String
  ip_address String
  session_id String? @db.ObjectId
  time       Float
  user_agent String
  user_id    String  @db.ObjectId
}

model apiToken {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  active        Boolean
  compromised   Boolean
  created_at    Float
  last_accessed Float?
  modified_by   String
  token         String
  updated_at    Float
  user_agent    String?
  user_id       String   @db.ObjectId
  whitelist_ip  String[]
}

model freight {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  amount                 FreightAmount?
  contains_danger_goods  Boolean?
  contains_documents     Boolean?
  country                String?
  created_at             Float
  from                   FreightFrom[]
  is_import              Boolean?
  is_residential_address Boolean?
  items                  FreightItems[]
  modified_by            String?        @db.ObjectId
  number_of_items        Int?
  session_id             String         @db.ObjectId
  status                 String
  to                     FreightTo[]
  total_weight           Int?
  tracking_number        String
  type                   String
  updated_at             Float
  user_id                String         @db.ObjectId
}

model invoices {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  amount                  Int
  created_at              Float
  currency                String
  external_id             String
  freight_id              String @db.ObjectId
  freight_tracking_number String
  invoice_id              String
  session_id              String @db.ObjectId
  status                  String
  updated_at              Float
  user_id                 String @db.ObjectId
}

model newsletter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  created_at  Float
  email       String
  is_subsribe Boolean
  updated_at  Float
}

model otp {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  code        Int
  created_at  Float
  expired     Boolean
  modified_by String
  token       String
  updated_at  Float
  user_id     String  @db.ObjectId
  verified    Boolean
}

model rates {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model sessions {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  active        Boolean
  compromised   Boolean
  ip_address    String
  key           SessionsKey?
  last_accessed Float
  location      String?
  modified_by   String?
  token         String
  user_agent    String
  user_id       String       @db.ObjectId
}

model threats {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model users {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  /// Could not determine type: the field only had null or empty values in the sample set.
  avatar              Json?
  created_at          Float?
  devices             String[]
  email               String
  email_verify_at     Float?
  first_name          String
  last_accessed       Float?
  last_name           String
  oauth2              UsersOauth2?
  old_passwords       String[]
  password            String?
  password_changed_on Float?
  ref                 String
  registration_type   String
  role                String
  timezone            String?
  updated_at          Float?
}
