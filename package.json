{
  "name": "@freight-capstone/core1",
  "version": "1.0.0",
  "description": "",
  "bugs": {
    "url": "https://github.com/freight-capstone/core1/issues"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:freight-capstone/core1.git"
  },
  "license": "MIT",
  "author": "The Freight Capstone Core 1",
  "scripts": {
    "echo": "echo \"im just lazy\"",
    "start": "concurrently \"npm run server\" \"npm run client\"",
    "server": "cd server && npm run dev",
    "client": "cd client && npm run start",
    "setup": "concurrently \"npm run server:install\" \"npm run client:install\"",
    "server:install": "cd server && npm i",
    "client:install": "cd client && npm i",
    "setup:env": "concurrently \"npm run server:env\" \"npm run client:env\"",
    "server:env": "cd server && concurrently \"npm run env\" \"npm run gemini\" \"npm run prompt\"",
    "client:env": "cd client && [ ! -f .env ] && cp .env.example .env",
    "post:production": "concurrently \"cd server && npm run production\" \"npm run client:post\"",
    "client:post": "cd client && npm run build && cd build && python3 -m http.server",
    "prettier": "concurrently \"npm run server:pretty\" \"npm run client:pretty\"",
    "server:pretty": "cd server && npm run pretty",
    "client:pretty": "cd client && npm run pretty",
    "test": "concurrently \"npm run server:test\" \"npm run client:test\"",
    "server:test": "cd server && npm run test",
    "client:test": "cd client && npm run test",
    "docker": "cd server && docker build -t core1-server .",
    "docker:run": "cd server && docker run -p 5051:5051 --env-file .env core1-server:latest",
    "terraform": "cd server && terraform init && terraform plan -out=tfplan && terraform apply -auto-approve tfplan",
    "pm2": "cd server && npm run pm2",
    "pm2:restart": "pm2 restart all --update-env",
    "app": "cd mobile && npm run android",
    "app:install": "cd mobile && npm i",
    "app:lint": "cd mobile && npm run lint",
    "spellcheck": "npx --yes cspell --show-context --show-suggestions '**/*.*'",
    "prom": "sudo systemctl start prometheus",
    "prom:restart": "sudo systemctl restart prometheus",
    "graf": "sudo systemctl start grafana",
    "graf:restart": "sudo systemctl restart grafana"
  },
  "devDependencies": {
    "concurrently": "^9.0.1"
  },
  "engines": {
    "node": ">=20.x"
  },
  "private": true,
  "dependencies": {
    "request": "^2.88.2",
    "yamlparser": "^0.0.2"
  }
}
